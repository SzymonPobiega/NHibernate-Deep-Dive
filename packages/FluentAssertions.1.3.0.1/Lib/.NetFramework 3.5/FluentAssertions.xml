<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentAssertions</name>
    </assembly>
    <members>
        <member name="M:FluentAssertions.AndConstraint`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:FluentAssertions.ReferenceTypeAssertions`2.BeAssignableTo``1">
            <summary>
            Asserts that the object is assignable to a variable of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to which the object should be assignable.</typeparam>
            <returns>An <see cref="T:FluentAssertions.AndConstraint`1"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.ReferenceTypeAssertions`2.BeAssignableTo``1(System.String,System.Object[])">
            <summary>
            Asserts that the object is assignable to a variable of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to which the object should be assignable.</typeparam>
            <param name="reason">The reason why the object should be assignable to the type.</param>
            <param name="reasonParameters">The parameters used when formatting the <paramref name="reason"/>.</param>
            <returns>An <see cref="T:FluentAssertions.AndConstraint`1"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.ReferenceTypeAssertions`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
              Asserts that the <paramref name="predicate"/> is statisfied.
            </summary>
            <param name="predicate">The predicate which must be satisfied by the <typeparamref name="TSubject"/>.</param>
            <returns>An <see cref="!:AndConstraint"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.ReferenceTypeAssertions`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Object[])">
            <summary>
              Asserts that the <paramref name="predicate"/> is satisfied.
            </summary>
            <param name="predicate">The predicate which must be statisfied by the <typeparamref name="TSubject"/>.</param>
            <param name="reason">The reason why the predicate should be satisfied.</param>
            <param name="reasonParameters">The parameters used when formatting the <paramref name="reason"/>.</param>
            <returns>An <see cref="!:AndConstraint"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.ReferenceTypeAssertions`2.Match``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
              Asserts that the <paramref name="predicate"/> is satisfied.
            </summary>
            <param name="predicate">The predicate which must be statisfied by the <typeparamref name="TSubject"/>.</param>
            <returns>An <see cref="!:AndConstraint"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.ReferenceTypeAssertions`2.Match``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>
              Asserts that the <paramref name="predicate"/> is satisfied.
            </summary>
            <param name="predicate">The predicate which must be statisfied by the <typeparamref name="TSubject"/>.</param>
            <param name="reason">The reason why the predicate should be satisfied.</param>
            <param name="reasonParameters">The parameters used when formatting the <paramref name="reason"/>.</param>
            <returns>An <see cref="!:AndConstraint"/> which can be used to chain assertions.</returns>
        </member>
        <member name="P:FluentAssertions.ReferenceTypeAssertions`2.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="P:FluentAssertions.BooleanAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.HaveCount(System.Linq.Expressions.Expression{System.Func{System.Int32,System.Boolean}})">
            <summary>
            Asserts that the number of items in the collection matches a condition stated by a predicate.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.HaveCount(System.Linq.Expressions.Expression{System.Func{System.Int32,System.Boolean}},System.String,System.Object[])">
            <summary>
            Asserts that the number of items in the collection matches a condition stated by a predicate.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.Equal(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection to contain all the same elements in the same order as the collection identified by 
            <param name="expected"/>. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.Equal(System.Object[])">
            <summary>
            Expects the current collection to contain all the same elements in the same order as the collection identified by 
            <param name="expected"/>. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.Equal(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection to contain all the same elements in the same order as the collection identified by 
            <param name="expected"/>. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.NotEqual(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection not to contain all the same elements in the same order as the collection identified by 
            <param name="expected"/>. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.NotEqual(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection not to contain all the same elements in the same order as the collection identified by 
            <param name="expected"/>. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.BeEquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection to contain all elements of the collection identified by <param name="expected"/>,
            regardless of the order. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.BeEquivalentTo(System.Object[])">
            <summary>
            Expects the current collection to contain all elements of the collection identified by <param name="expected"/>,
            regardless of the order. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.BeEquivalentTo(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection to contain all elements of the collection identified by <param name="expected"/>,
            regardless of the order. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.NotBeEquivalentTo(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection not to contain all elements of the collection identified by <param name="expected"/>,
            regardless of the order. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.Contain(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection to contain the specified elements in any order. Elements are compared
            using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.Contain(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection to contain the specified elements in any order. Elements are compared
            using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.ContainInOrder(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection to contain the specified elements in the exact same order. Elements are compared
            using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.ContainInOrder(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection to contain the specified elements in the exact same order. Elements are compared
            using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.HaveSameCount(System.Collections.IEnumerable)">
            <summary>
            Assert that the current collection has the same number of elements as <paramref name="otherCollection"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.HaveSameCount(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that the current collection has the same number of elements as <paramref name="otherCollection"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.BeNull">
            <summary>
            Asserts that the current collection has not been initialized yet with an actual collection.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.BeNull(System.String,System.Object[])">
            <summary>
            Asserts that the current collection has not been initialized yet with an actual collection.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.NotBeNull">
            <summary>
            Asserts that the current collection has been initialized with an actual collection.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.NotBeNull(System.String,System.Object[])">
            <summary>
            Asserts that the current collection has been initialized with an actual collection.
            </summary>
        </member>
        <member name="M:FluentAssertions.CollectionAssertions`2.NotBeEquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection not to contain all elements of the collection identified by <param name="expected"/>,
            regardless of the order. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="T:FluentAssertions.Common.BaseDictionary`2">
            <summary>
              Represents a dictionary mapping keys to values.
            </summary>
            <remarks>
              Provides the plumbing for the portions of IDictionary which can reasonably be 
            implemented without any dependency on the underlying representation of the dictionary.
            </remarks>
        </member>
        <member name="T:FluentAssertions.EventMonitoring.EventMonitoringExtensions">
            <summary>
              Provides extension methods for monitoring and querying events.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)">
            <summary>
              Starts monitoring an object for its events.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if eventSource is Null.</exception>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldRaise(System.Object,System.String)">
            <summary>
            Asserts that an object has raised a particular event at least once.
            </summary>
            <param name="eventName">
            The name of the event that should have been raised.
            </param>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldRaise(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Asserts that an object has raised a particular event at least once.
            </summary>
            <param name="eventName">
            The name of the event that should have been raised.
            </param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldRaisePropertyChangeFor``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Asserts that an object has raised the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for a particular property.
            </summary>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldRaisePropertyChangeFor``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Object[])">
            <summary>
            Asserts that an object has raised the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for a particular property.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.WithSender(FluentAssertions.EventMonitoring.IEventRecorder,System.Object)">
            <summary>
            Asserts that all occurences of the event originated from the <param name="expectedSender"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.WithArgs``1(FluentAssertions.EventMonitoring.IEventRecorder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asserts that at least one occurrence of the event had an <see cref="T:System.EventArgs"/> object matching a predicate.
            </summary>
        </member>
        <member name="T:FluentAssertions.EventMonitoring.EventRecorder">
            <summary>
              Records activity for a single event.
            </summary>
        </member>
        <member name="T:FluentAssertions.EventMonitoring.IEventRecorder">
            <summary>
              Records raised events for one event on one object
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.IEventRecorder.RecordEvent(System.Object[])">
            <summary>
              Store information about a raised event
            </summary>
            <param name = "parameters">Parameters the event was raised with</param>
        </member>
        <member name="P:FluentAssertions.EventMonitoring.IEventRecorder.EventObject">
            <summary>
              The object events are recorded from
            </summary>
        </member>
        <member name="P:FluentAssertions.EventMonitoring.IEventRecorder.EventName">
            <summary>
              The name of the event that's recorded
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventRecorder.#ctor(System.Object,System.String)">
            <summary>
            </summary>
            <param name = "eventRaiser">The object events are recorded from</param>
            <param name = "eventName">The name of the event that's recorded</param>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventRecorder.GetEnumerator">
            <summary>
              Enumerate raised events
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventRecorder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Enumerate raised events
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventRecorder.RecordEvent(System.Object[])">
            <summary>
              Called by the auto-generated IL, to record information about a raised event.
            </summary>
        </member>
        <member name="P:FluentAssertions.EventMonitoring.EventRecorder.EventObject">
            <summary>
              The object events are recorded from
            </summary>
        </member>
        <member name="P:FluentAssertions.EventMonitoring.EventRecorder.EventName">
            <summary>
              The name of the event that's recorded
            </summary>
        </member>
        <member name="T:FluentAssertions.EventMonitoring.EventHandlerFactory">
            <summary>
              Static methods that aid in generic event subscription
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.GenerateHandler(System.Type,FluentAssertions.EventMonitoring.IEventRecorder)">
            <summary>
              Generates an eventhandler for an event of type eventSignature that calls RegisterEvent on recorder
              when invoked.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.GetDelegateReturnType(System.Type)">
            <summary>
              Finds the Return Type of a Delegate.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.GetDelegateParameterTypes(System.Type)">
            <summary>
              Returns an Array of Types that make up a delegate's parameter signature.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.AppendParameterListThisReference(System.Type[])">
            <summary>
              Returns an array of types appended with an EventRecorder reference at the beginning.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.TypeIsDelegate(System.Type)">
            <summary>
              Returns T/F Dependent on a Type Being a Delegate.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.DelegateInvokeMethod(System.Type)">
            <summary>
              Returns the MethodInfo for the Delegate's "Invoke" Method.
            </summary>
        </member>
        <member name="T:FluentAssertions.EventMonitoring.RecordedEvent">
            <summary>
              This class is used to store data about an intercepted event
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.RecordedEvent.#ctor(System.Object[])">
            <summary>
              Default constructor stores the parameters the event was raised with
            </summary>
        </member>
        <member name="P:FluentAssertions.EventMonitoring.RecordedEvent.Parameters">
            <summary>
              Parameters for the event
            </summary>
        </member>
        <member name="T:FluentAssertions.Common.WeakDictionary`2">
            <summary>
            A generic dictionary, which allows both its keys and values 
            to be garbage collected if there are no other references
            to them than from the dictionary itself.
            </summary>
            
            <remarks>
            If either the key or value of a particular entry in the dictionary
            has been collected, then both the key and value become effectively
            unreachable. However, left-over WeakReference objects for the key
            and value will physically remain in the dictionary until
            RemoveCollectedEntries is called. This will lead to a discrepancy
            between the Count property and the number of iterations required
            to visit all of the elements of the dictionary using its
            enumerator or those of the Keys and Values collections. Similarly,
            CopyTo will copy fewer than Count elements in this situation.
            </remarks>
        </member>
        <member name="M:FluentAssertions.GenericCollectionAssertions`1.Contain(`0)">
            <summary>
            Asserts that the collection contains the specified item.
            </summary>
        </member>
        <member name="M:FluentAssertions.GenericCollectionAssertions`1.Contain(`0,System.String,System.Object[])">
            <summary>
            Asserts that the collection contains the specified item.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.GenericCollectionAssertions`1.Contain(System.Collections.Generic.IEnumerable{`0},`0[])">
            <summary>
            Asserts that the collection contains some extra items in addition to the original items.
            </summary>
        </member>
        <member name="M:FluentAssertions.GenericCollectionAssertions`1.Contain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asserts that the collection contains at least one item that matches the predicate.
            </summary>
        </member>
        <member name="M:FluentAssertions.GenericCollectionAssertions`1.Contain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Asserts that the collection contains at least one item that matches the predicate.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.GenericCollectionAssertions`1.OnlyContain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asserts that the collection only contains items that match a predicate.
            </summary>
        </member>
        <member name="M:FluentAssertions.GenericCollectionAssertions`1.OnlyContain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Asserts that the collection only contains items that match a predicate.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.GenericCollectionAssertions`1.NotContain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asserts that the collection does not contain any items that match the predicate.
            </summary>
        </member>
        <member name="M:FluentAssertions.GenericCollectionAssertions`1.NotContain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Asserts that the collection does not contain any items that match the predicate.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="T:FluentAssertions.AssertionExtensions">
            <summary>
            Contains extension methods for custom assertions in unit tests.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Invoking``1(``0,System.Action{``0})">
            <summary>
            Invokes the specified action on an subject so that you can chain it with any of the ShouldThrow or ShouldNotThrow 
            overloads.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldThrow``1(System.Action)">
            <summary>
            Asserts that the <paramref name="action"/> throws an exception.
            </summary>
            <typeparam name="TException">
            The type of the exception it should throw.
            </typeparam>
            <returns>
            Returns an object that allows asserting additional members of the thrown exception.
            </returns>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldThrow``1(System.Action,System.String,System.Object[])">
            <summary>
            Asserts that the <paramref name="action"/> throws an exception.
            </summary>
            <typeparam name="TException">
            The type of the exception it should throw.
            </typeparam>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
            <returns>
            Returns an object that allows asserting additional members of the thrown exception.
            </returns>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldNotThrow``1(System.Action)">
            <summary>
            Asserts that the <paramref name="action"/> does not throw a particular exception.
            </summary>
            <typeparam name="TException">
            The type of the exception it should not throw. Any other exceptions are ignored and will satisfy the assertion.
            </typeparam>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldNotThrow``1(System.Action,System.String,System.Object[])">
            <summary>
            Asserts that the <paramref name="action"/> does not throw a particular exception.
            </summary>
            <typeparam name="TException">
            The type of the exception it should not throw. Any other exceptions are ignored and will satisfy the assertion.
            </typeparam>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldNotThrow(System.Action)">
            <summary>
            Asserts that the <paramref name="action"/> does not throw any exception at all.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldNotThrow(System.Action,System.String,System.Object[])">
            <summary>
            Asserts that the <paramref name="action"/> does not throw any exception at all.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Enumerating(System.Func{System.Collections.IEnumerable})">
            <summary>
            Forces enumerating a collection. Should be used to assert that a method that uses the 
            <c>yield</c> keyword throws a particular exception.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldHave``1(``0)">
            <summary>
            Asserts that the properties of an object matches those of another object.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.As``1(System.Object)">
            <summary>
            Safely casts the specified object to the type specified through <typeparamref name="TTo"/>.
            </summary>
            <remarks>
            Has been introduced to allow casting objects without breaking the fluent API.
            </remarks>
            <typeparam name="TTo"></typeparam>
        </member>
        <member name="M:FluentAssertions.DateTimeAssertions.BeMoreThan(System.TimeSpan)">
            <summary>
            The amount of time that a <see cref="T:System.DateTime"/> should exceed compared to another <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.DateTimeAssertions.BeAtLeast(System.TimeSpan)">
            <summary>
            The amount of time that a <see cref="T:System.DateTime"/> should be equal or exceed compared to another <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.DateTimeAssertions.BeExactly(System.TimeSpan)">
            <summary>
            The amount of time that a <see cref="T:System.DateTime"/> should differ exactly compared to another <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.DateTimeAssertions.BeWithin(System.TimeSpan)">
            <summary>
            The maximum amount of time that a <see cref="T:System.DateTime"/> should differ compared to another <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.DateTimeAssertions.BeLessThan(System.TimeSpan)">
            <summary>
            The amount of time that a <see cref="T:System.DateTime"/> should be within another <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:FluentAssertions.DateTimeAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="M:FluentAssertions.ExceptionAssertions`1.WithMessage(System.String)">
            <summary>
            Asserts that the thrown exception has a message matching the <paramref name="expectedMessage"/>.
            </summary>
            <param name="expectedMessage">The expected message of the exception.</param>
            <returns>An <see cref="!:AndConstraint"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.ExceptionAssertions`1.WithMessage(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the thrown exception has a message matching the <paramref name="expectedMessage"/>.
            </summary>
            <param name="expectedMessage">The expected message of the exception.</param>
            <param name="reason">
            The reason why the message of the exception should match the <paramref name="expectedMessage"/>.
            </param>
            <param name="reasonParameters">The parameters used when formatting the <paramref name="reason"/>.</param>
            <returns>An <see cref="!:AndConstraint"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.ExceptionAssertions`1.WithInnerException``1">
            <summary>
            Asserts that the thrown exception contains an inner exception of type <typeparamref name="TInnerException"/>.
            </summary>
            <typeparam name="TInnerException">The expected type of the inner exception.</typeparam>
            <returns>An <see cref="!:AndConstraint"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.ExceptionAssertions`1.WithInnerException``1(System.String,System.Object[])">
            <summary>
            Asserts that the thrown exception contains an inner exception of type <typeparamref name="TInnerException"/>.
            </summary>
            <typeparam name="TInnerException">The expected type of the inner exception.</typeparam>
            <param name="reason">The reason why the inner exception should be of the supplied type.</param>
            <param name="reasonParameters">The parameters used when formatting the <paramref name="reason"/>.</param>
            <returns>An <see cref="!:AndConstraint"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.ExceptionAssertions`1.WithInnerMessage(System.String)">
            <summary>
            Asserts that the thrown exception contains an inner exception with the <paramref name="expectedInnerMessage"/>.
            </summary>
            <param name="expectedInnerMessage">The expected message of the inner exception.</param>
            <returns>An <see cref="!:AndConstraint"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.ExceptionAssertions`1.WithInnerMessage(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the thrown exception contains an inner exception with the <paramref name="expectedInnerMessage"/>.
            </summary>
            <param name="expectedInnerMessage">The expected message of the inner exception.</param>
            <param name="reason">
            The reason why the message of the inner exception should match <paramref name="expectedInnerMessage"/>.
            </param>
            <param name="reasonParameters">The parameters used when formatting the <paramref name="reason"/>.</param>
            <returns>An <see cref="!:AndConstraint"/> which can be used to chain assertions.</returns>
        </member>
        <member name="P:FluentAssertions.ExceptionAssertions`1.And">
            <summary>
            Gets the exception object of the exception thrown.
            </summary>
        </member>
        <member name="M:FluentAssertions.ObjectAssertions.Be(System.Object)">
            <summary>
            Asserts that the value of an object equals another object when using it's <see cref="M:System.Object.Equals(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:FluentAssertions.ObjectAssertions.Be(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object equals another object using it's <see cref="M:System.Object.Equals(System.Object)"/> method.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.ObjectAssertions.NotBe(System.Object)">
            <summary>
            Asserts that an object does not equal another object using it's <see cref="M:System.Object.Equals(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:FluentAssertions.ObjectAssertions.NotBe(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object does not equal another object using it's <see cref="M:System.Object.Equals(System.Object)"/> method.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.ObjectAssertions.BeSameAs(System.Object)">
            <summary>
            Asserts that an object reference refers to the exact same object as another object reference.
            </summary>
        </member>
        <member name="M:FluentAssertions.ObjectAssertions.BeSameAs(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object reference refers to the exact same object as another object reference.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.ObjectAssertions.NotBeSameAs(System.Object)">
            <summary>
            Asserts that an object reference refers to a different object than another object reference refers to.
            </summary>
        </member>
        <member name="M:FluentAssertions.ObjectAssertions.NotBeSameAs(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object reference refers to a different object than another object reference refers to.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.PropertyAssertions`1.AllProperties">
            <summary>
            Includes all properties of <typeparamref name="T"/> when comparing the subject with another object using <see cref="M:FluentAssertions.PropertyAssertions`1.EqualTo(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.PropertyAssertions`1.SharedProperties">
            <summary>
            Includes all properties of <typeparamref name="T"/> when comparing the subject with another object using <see cref="M:FluentAssertions.PropertyAssertions`1.EqualTo(System.Object)"/>, 
            except those that the other object does not have.
            </summary>
        </member>
        <member name="M:FluentAssertions.PropertyAssertions`1.AllPropertiesBut(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Includes all properties of <typeparamref name="T"/> when comparing the subject with another object using <see cref="M:FluentAssertions.PropertyAssertions`1.EqualTo(System.Object)"/>, 
            except those specified using a property expression.
            </summary>
        </member>
        <member name="M:FluentAssertions.PropertyAssertions`1.Properties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Includes only those properties of <typeparamref name="T"/> when comparing the subject with another object using <see cref="M:FluentAssertions.PropertyAssertions`1.EqualTo(System.Object)"/>
            that were specified using a property expression.
            </summary>
        </member>
        <member name="M:FluentAssertions.PropertyAssertions`1.EqualTo(System.Object)">
            <summary>
            Asserts that the previously selected properties of <typeparamref name="T"/> have the same value as the equally named
            properties of <paramref name="comparee"/>.
            </summary>
            <remarks>
            Property values are considered equal if, after converting them to the requested type, calling <see cref="!:T.Equals(object)"/> 
            returns <c>true</c>.
            </remarks>
        </member>
        <member name="M:FluentAssertions.PropertyAssertions`1.EqualTo(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that the previously selected properties of <typeparamref name="T"/> have the same value as the equally named
            properties of <paramref name="comparee"/>.
            </summary>
            <remarks>
            Property values are considered equal if, after converting them to the requested type, calling <see cref="!:T.Equals(object)"/> 
            returns <c>true</c>.
            </remarks>
        </member>
        <member name="P:FluentAssertions.PropertyAssertions`1.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="M:FluentAssertions.StringAssertions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:FluentAssertions.StringAssertions.BeEquivalentTo(System.String)">
            <summary>
            Case insensitive comparison
            </summary>
        </member>
        <member name="M:FluentAssertions.StringAssertions.BeEquivalentTo(System.String,System.String,System.Object[])">
            <summary>
            Case insensitive comparison
            </summary>
        </member>
        <member name="M:FluentAssertions.StringAssertions.NotBeNullOrEmpty">
            <summary>
            Ensures that a string is neither <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:FluentAssertions.StringAssertions.NotBeNullOrEmpty(System.String,System.Object[])">
            <summary>
            Ensures that a string is neither <c>null</c> or empty.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.StringAssertions.BeNullOrEmpty">
            <summary>
            Ensures that a string is neither <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:FluentAssertions.StringAssertions.BeNullOrEmpty(System.String,System.Object[])">
            <summary>
            Ensures that a string is either <c>null</c> or empty.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="P:FluentAssertions.StringAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.TimeSpanAssertions">
            <summary>
            Provides methods for asserting that two <see cref="T:System.DateTime"/> objects differ in certain ways.
            </summary>
        </member>
        <member name="M:FluentAssertions.TimeSpanAssertions.Before(System.DateTime)">
            <summary>
            Asserts that a <see cref="T:System.DateTime"/> occurs a specified amount of time before another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="target">
            The <see cref="T:System.DateTime"/> to compare the subject with.
            </param>
        </member>
        <member name="M:FluentAssertions.TimeSpanAssertions.Before(System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that a <see cref="T:System.DateTime"/> occurs a specified amount of time before another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="target">
            The <see cref="T:System.DateTime"/> to compare the subject with.
            </param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.TimeSpanAssertions.After(System.DateTime)">
            <summary>
            Asserts that a <see cref="T:System.DateTime"/> occurs a specified amount of time after another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="target">
            The <see cref="T:System.DateTime"/> to compare the subject with.
            </param>
        </member>
        <member name="M:FluentAssertions.TimeSpanAssertions.After(System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that a <see cref="T:System.DateTime"/> occurs a specified amount of time after another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="target">
            The <see cref="T:System.DateTime"/> to compare the subject with.
            </param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonParameters">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="T:FluentAssertions.TimeSpanAssertions.TimeSpanPredicate">
            <summary>
            Provides the logic and the display text for a <see cref="T:FluentAssertions.TimeSpanCondition"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Verification.Verify(System.Func{System.Boolean},System.String,System.Object,System.Object,System.String,System.Object[])">
            <summary>
              Asserts that the supplied <paramref name="condition"/> is met.
            </summary>
            <param name="condition">The condition to assert</param>
            <param name="failureMessage">
              The message that will be used in the <see cref="!:SpecificationMismatchException"/>. This should describe what
              was expected and why. This message should contain the following 3 placeholders:<br/>
              <list type="bullet">
                <item>{0} = expected value</item>
                <item>{1} = actual value</item>
                <item>{2} = the reason for the expectation</item>
              </list>
            </param>
            <param name="expected">The expected value, or <c>null</c> if there is no explicit expected value</param>
            <param name="actual">The actual value, or <c>null</c> if there is no explicit actual value</param>
            <param name="reason">Should describe the reason for the expectation</param>
            <param name="reasonParameters">Optional parameters for the <paramref name="reason"/></param>
            <example>
              <code>
                Verification.Verify(() =&gt; value == 0,
                "Expected value to be &lt;{0}&gt;{2}, but found &lt;{1}&gt;",
                expected,
                reason,
                reasonParameters);
              </code>
            </example>
            <exception cref="!:SpecificationMismatchException">when an  exception is thrown.</exception>
        </member>
        <member name="M:FluentAssertions.Verification.Verify(System.Boolean,System.String,System.Object,System.Object,System.String,System.Object[])">
            <summary>
              Asserts that the supplied <paramref name="condition"/> is <c>true</c>.
            </summary>
            <param name="condition">The condition to assert</param>
            <param name="failureMessage">
              The message that will be used in the <see cref="!:SpecificationMismatchException"/>. This should describe what
              was expected and why. This message should contain the following 3 placeholders:<br/>
              <list type="bullet">
                <item>{0} = expected value</item>
                <item>{1} = actual value</item>
                <item>{2} = the reason for the expectation</item>
              </list>
            </param>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="reason">Should describe the reason for the expectation</param>
            <param name="reasonParameters">Optional parameters for the <paramref name="reason"/></param>
            <example>
              <code>
                Verification.Verify(() =&gt; value == 0,
                "Expected value to be &lt;{0}&gt;{2}, but found &lt;{1}&gt;",
                expected,
                reason,
                reasonParameters);
              </code>
            </example>
            <exception cref="!:SpecificationMismatchException">when the condition is <c>false</c>.</exception>
        </member>
        <member name="M:FluentAssertions.Verification.ToString(System.Object)">
            <summary>
              If the value is a collection, returns it as a comma-separated string.
            </summary>
        </member>
    </members>
</doc>
